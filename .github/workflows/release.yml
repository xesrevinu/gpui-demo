name: Release & Publish

on:
  push:
    branches:
      - main

permissions: {}

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 1
  RUST_BACKTRACE: 1
  RUST_LOG: error
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 2

jobs:
  versions:
    name: Create Release PR or Publish
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    outputs:
      need_publish: ${{ steps.release_check.outputs.need_publish }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: cachix/install-nix-action@v27
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            substituters = https://cache.nixos.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=

      - name: Setup Node package manager
        uses: pnpm/action-setup@v3

      - name: Install Node dependencies
        run: pnpm install

      - name: Verify Versions
        run: nix develop --command just verify-versions

      - name: Changesets check
        id: changesets
        uses: changesets/action@v1
        with:
          version: nix develop --command just versions-sync
          publish: ""
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release check
        id: release_check
        run: |
          if [ "${{ steps.changesets.outputs.hasChangesets }}" = "true" ]; then
            echo "need_publish=false" >> $GITHUB_OUTPUT
          else
            echo "need_publish=true" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build Packages
    needs: versions
    if: |
      needs.versions.outputs.need_publish == 'true' &&
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      contains(github.event.head_commit.message, 'Version Packages')
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: aarch64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: ./.github/actions/build
        with:
          release_type: "stable"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          macos-certificate: ${{ secrets.MACOS_CERTIFICATE }}
          macos-certificate-password: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          apple-notarization-username: ${{ secrets.APPLE_NOTARIZATION_USERNAME }}
          apple-notarization-password: ${{ secrets.APPLE_NOTARIZATION_PASSWORD }}

  publish:
    name: Publish Release
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4

      - name: Generate Checksums
        id: checksums
        run: |
          find . -type f \( -name "*.dmg" -o -name "*.tar.gz" -o -name "*.app" \) -exec sha256sum {} \; > checksums.txt
          echo "content<<EOF" >> $GITHUB_OUTPUT
          cat checksums.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get Version
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create Tag
        run: |
          git tag v${{ steps.get_version.outputs.version }}
          git push origin v${{ steps.get_version.outputs.version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          files: |
            macos-bundle/*
            linux-bundle/*
            checksums.txt
          generate_release_notes: true
          body: |
            ## Release Notes
            Please see CHANGELOG.md for details.

            ## SHA-256 Checksums
            ```
            ${{ steps.checksums.outputs.content }}
            ```
