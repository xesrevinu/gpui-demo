name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  APP_NAME: gpui-demo

jobs:
  versions:
    name: Create Release PR
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.changesets.outputs.hasChangesets }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: cachix/install-nix-action@v27
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js and pnpm
        uses: pnpm/action-setup@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: pnpm install

      - name: Verify Versions
        run: nix develop --command just verify-versions

      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          version: just versions-sync
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get Version
        id: get_version
        if: steps.changesets.outputs.hasChangesets == 'true'
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

  verify:
    name: Verify Build
    needs: versions
    if: needs.versions.outputs.has_changes == 'true'
    uses: ./.github/workflows/config.yml
    with:
      release_type: "stable"
    secrets: inherit

  build:
    name: Build Release
    needs: versions
    if: needs.versions.outputs.has_changes == 'true'
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: bundle-mac
            artifact: macos-bundle
            paths: |
              target/release/*.app
              target/release/*.dmg
          - os: ubuntu-latest
            target: bundle-linux
            artifact: linux-bundle
            arch: x86_64
            paths: gpui-demo-linux-x86_64.tar.gz
          - os: ubuntu-latest
            target: bundle-linux
            artifact: linux-bundle
            arch: aarch64
            paths: gpui-demo-linux-aarch64.tar.gz
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v27
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            substituters = https://cache.nixos.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=

      # 添加 Rust 缓存
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "build-${{ matrix.os }}-${{ matrix.arch }}"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      # 构建
      - name: Build Package
        run: |
          if [ "${{ matrix.target }}" = "bundle-linux" ]; then
            nix develop --command just ${{ matrix.target }} ${{ matrix.arch }}-unknown-linux-gnu
          else
            nix develop --command just ${{ matrix.target }}
            nix develop --command just verify-bundle
            nix develop --command just create-dmg
          fi

      # 上传构建产物
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.paths }}

  publish:
    name: Create GitHub Release
    needs: [versions, build]
    if: needs.versions.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4

      - name: Generate Checksums
        id: checksums
        run: |
          ls -la
          find . -type f \( -name "*.dmg" -o -name "*.tar.gz" -o -name "*.app" \) -exec sha256sum {} \; > checksums.txt
          echo "content<<EOF" >> $GITHUB_OUTPUT
          cat checksums.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Tag
        run: |
          git tag v${{ needs.versions.outputs.version }}
          git push origin v${{ needs.versions.outputs.version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.versions.outputs.version }}
          files: |
            macos-bundle/*
            linux-bundle/*
            checksums.txt
          generate_release_notes: true
          body: |
            ## Release Notes
            Please see CHANGELOG.md for details.

            ## SHA-256 Checksums
            ```
            ${{ steps.checksums.outputs.content }}
            ```
